print(hello_world)
print("hello_world")
library(tidyverse)
install.packages("tidyverse")
install.packages("lubridate")
setwd("C:/Users/rohit/Desktop")
list.files("C:/Users/rohit/Desktop/CyclisticAnalysis/data/raw/divvy-tripdata")
trip23_may <- read.csv("C:/Users/rohit/Desktop/CyclisticAnalysis/data/raw/divvy-tripdata/20305-divvy-tripdata.csv")
trip23_may <- read.csv("202305-divvy-tripdata.csv")
trip23_may <- read.csv("C:/Users/rohit/Desktop/CyclisticAnalysis/data/raw/divvy-tripdata/20305-divvy-tripdata.csv")
setwd("C:/Users/rohit/Desktop/CyclisticAnalysis/data/raw/divvy-tripdata")
trip23_may <- read.csv("202305-divvy-tripdata.csv")
trip23_june <- read.csv("202306-divvy-tripdata.csv")
trip23_july <- read.csv("202307-divvy-tripdata.csv")
trip23_august <- read.csv("202308-divvy-tripdata.csv")
trip23_September <- read.csv("202309-divvy-tripdata.csv")
trip23_October <- read.csv("202310-divvy-tripdata.csv")
trip23_November <- read.csv("202311-divvy-tripdata.csv")
trip23_December <- read.csv("202312-divvy-tripdata.csv")
trip24_January <- read.csv("202401-divvy-tripdata.csv")
trip24_February <- read.csv("202402-divvy-tripdata.csv")
trip24_March <- read.csv("202403-divvy-tripdata.csv")
trip24_april <- read.csv("202404-divvy-tripdata.csv")
trips_combined <- rbind( trip23_May, trip23_Jun, trip23_Jul, trip23_Aug, trip23_Sep, trip23_Oct, trip23_Nov, trip23_Dec, trip24_Jan, trip24_Feb, trip24_Mar, trip24_Apr)
trips_combined <- rbind( trip23_may, trip23_Jun, trip23_Jul, trip23_Aug, trip23_Sep, trip23_Oct, trip23_Nov, trip23_Dec, trip24_Jan, trip24_Feb, trip24_Mar, trip24_Apr)
trips_combined <- rbind( trip23_may, trip23_June, trip23_Jul, trip23_Aug, trip23_Sep, trip23_Oct, trip23_Nov, trip23_Dec, trip24_Jan, trip24_Feb, trip24_Mar, trip24_Apr
trips_combined <- rbind( trip23_may, trip23_june, trip23_july, trip23_august, trip23_September, trip23_October, trip23_November, trip23_December, trip24_January, trip24_February, trip24_March, trip24_april)
trips_combined <- rbind(
trip23_may, trip23_june, trip23_july, trip23_august, trip23_September,
trip23_October, trip23_November, trip23_December, trip24_January,
trip24_February, trip24_March, trip24_april
)
# Assuming the dataset is named trips_combined
View(trips_combined)
library(tidyverse)
trips_combined <- trips_combined %>%
select(-c(start_lat, start_lng, end_lat, end_lng, start_station_id, end_station_id, end_station_name))
trips_combined <- trips_combined %>%
select(-c(start_lat, start_lng, end_lat, end_lng, start_station_id, end_station_id, end_station_name))
# List of column names
colnames(trips_combined)
# Number of rows in the data frame
nrow(trips_combined)
# Dimensions of the data frame (number of rows and columns)
dim(trips_combined)
# See the first 6 rows of the data frame
head(trips_combined, 6)
# See the last few rows of the data frame
tail(trips_combined)
# See the structure of the data frame (list of columns and data types)
str(trips_combined)
# Get a summary of the data (provides min, max, mean, etc. for each column)
summary(trips_combined)
# Convert started_at to Date format and create additional columns
trips_combined$date <- as.Date(trips_combined$started_at)
trips_combined$month <- format(trips_combined$date, "%m")
trips_combined$day <- format(trips_combined$date, "%d")
trips_combined$year <- format(trips_combined$date, "%Y")
trips_combined$day_of_week <- format(trips_combined$date, "%A")
# Extract time and convert it to POSIXct format
trips_combined$time <- format(trips_combined$started_at, format = "%H:%M")
trips_combined$time <- as.POSIXct(trips_combined$time, format = "%H:%M")
trips_combined$date <- as.Date(trips_combined$started_at)
# Assuming trips_combined is your dataset name
# Convert 'started_at' and 'ended_at' to POSIXct format if they are not already
trips_combined$started_at <- as.POSIXct(trips_combined$started_at, format = "%Y-%m-%d %H:%M:%S")
trips_combined$ended_at <- as.POSIXct(trips_combined$ended_at, format = "%Y-%m-%d %H:%M:%S")
# Calculate ride length in minutes and create ride_length column
trips_combined$ride_length <- as.double(difftime(trips_combined$ended_at, trips_combined$started_at, units = "mins"))
# Display the first few rows to inspect the new column
head(trips_combined)
head(trips_combined)
str(trips_combined)
trips_combined$ride_length <- as.numeric(as.character(trips_combined$ride_length))
str(trips_combined)
trips_combined <- trips_combined[!(trips_combined$start_station_name == "HQ QR" | trips_combined$ride_length < 0),]
summary(trips_combined$ride_length)
# Calculate mean ride_length for each member type
mean_ride_length <- aggregate(trips_combined$ride_length ~ trips_combined$member_casual, FUN = mean)
# Calculate median ride_length for each member type
median_ride_length <- aggregate(trips_combined$ride_length ~ trips_combined$member_casual, FUN = median)
# Calculate maximum ride_length for each member type
max_ride_length <- aggregate(trips_combined$ride_length ~ trips_combined$member_casual, FUN = max)
# Calculate minimum ride_length for each member type
min_ride_length <- aggregate(trips_combined$ride_length ~ trips_combined$member_casual, FUN = min)
# Print the results
mean_ride_length
median_ride_length
max_ride_length
min_ride_length
# Order the days of the week within the dataset
trips_combined$day_of_week <- ordered(trips_combined$day_of_week, levels=c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))
library(dplyr)
library(lubridate)
# Assuming trips_combined is your dataset name
# Create a weekday field and summarize number of rides
weekday_summary <- trips_combined %>%
mutate(day_of_week = wday(started_at, label = TRUE)) %>%  # creates weekday field using wday()
group_by(member_casual, day_of_week) %>%  # groups by usertype and weekday
summarise(number_of_rides = n(), .groups = 'drop')  # summarize number of rides
# View the result
weekday_summary
library(dplyr)
library(ggplot2)
# Assuming trips_combined is your dataset name
# Create the day_of_week field
trips_combined$day_of_week <- format(as.Date(trips_combined$date), "%A")
# Total rides broken down by weekday
weekday_rides <- trips_combined %>%
group_by(member_casual, day_of_week) %>%
summarise(number_of_rides = n(), .groups = 'drop') %>%
arrange(member_casual, day_of_week)
# Plot the data
ggplot(weekday_rides, aes(x = day_of_week, y = number_of_rides, fill = member_casual)) +
geom_col(position = "dodge") +
labs(x = 'Day of Week', y = 'Total Number of Rides', title = 'Rides per Day of Week', fill = 'Type of Membership') +
scale_y_continuous(breaks = c(250000, 400000, 550000), labels = c("250K", "400K", "550K"))
# Plot the data
ggplot(weekday_rides, aes(x = day_of_week, y = number_of_rides, fill = member_casual)) +
geom_col(position = "dodge") +
labs(x = 'Day of Week', y = 'Total Number of Rides', title = 'Rides per Day of Week', fill = 'Type of Membership') +
scale_y_continuous(breaks = c(250000, 400000, 550000), labels = c("250K", "400K", "550K"))
library(dplyr)
library(ggplot2)
# Assuming trips_combined is your dataset name
# Total rides broken down by month
monthly_rides <- trips_combined %>%
group_by(member_casual, month) %>%
summarise(total_rides = n(), `average_duration_(mins)` = mean(ride_length), .groups = 'drop') %>%
arrange(member_casual)
# Plot the data
ggplot(monthly_rides, aes(x = month, y = total_rides, fill = member_casual)) +
geom_col(position = "dodge") +
labs(x = "Month", y = "Total Number of Rides", title = "Rides per Month", fill = "Type of Membership") +
scale_y_continuous(breaks = c(100000, 200000, 300000, 400000), labels = c("100K", "200K", "300K", "400K")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(dplyr)
library(ggplot2)
# Assuming trips_combined is your dataset name
# Breakdown of bike types rented
ggplot(trips_combined, aes(x = rideable_type, fill = member_casual)) +
geom_bar(position = "dodge") +
labs(x = 'Type of Bike', y = 'Number of Rentals', title = 'Which Bike Works the Most', fill = 'Type of Membership') +
scale_y_continuous(breaks = c(500000, 1000000, 1500000), labels = c("500K", "1Mil", "1.5Mil"))
# Find the average time spent riding by each membership type per individual day
trips_combined %>%
mutate(day_of_week = wday(started_at, label = TRUE)) %>%
group_by(member_casual, day_of_week) %>%
summarise(number_of_rides = n(),
average_duration = mean(ride_length), .groups = 'drop') %>%
arrange(member_casual, day_of_week) %>%
ggplot(aes(x = day_of_week, y = average_duration, fill = member_casual)) +
geom_col(position = "dodge") +
labs(x = 'Days of the Week', y = 'Average Duration - Minutes', title = 'Average Ride Time per Week', fill = 'Type of Membership') +
scale_y_continuous(labels = scales::comma)
# Visualizing trend of total rides over months
ggplot(trips_combined, aes(x = month, y = ..count.., fill = member_casual)) +
geom_bar() +
labs(x = "Month", y = "Total Number of Rides", fill = "Type of Membership",
title = "Total Rides per Month by Membership Type") +
scale_fill_manual(values = c("#619CFF", "#FFA07A"))  # Custom color palette
# Visualizing trend of total rides over months
ggplot(trips_combined, aes(x = factor(month), fill = member_casual)) +
geom_bar() +
labs(x = "Month", y = "Total Number of Rides", fill = "Type of Membership",
title = "Total Rides per Month by Membership Type") +
scale_x_discrete(labels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec")) +  # Adjust month labels if necessary
scale_fill_manual(values = c("#619CFF", "#FFA07A"))  # Custom color palette
# Visualizing trend of total rides over months
ggplot(trips_combined, aes(x = factor(month), y = ..count.., fill = member_casual)) +
geom_bar() +
labs(x = "Month", y = "Total Number of Rides", fill = "Type of Membership",
title = "Total Rides per Month by Membership Type") +
scale_x_discrete(labels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec")) +  # Adjust month labels if necessary
scale_y_continuous(labels = function(x) format(x, scientific = FALSE)) +  # Format y-axis labels
scale_fill_manual(values = c("#619CFF", "#FFA07A"))  # Custom color palette
# Visualizing distribution of ride durations
ggplot(trips_combined, aes(x = factor(member_casual), y = ride_length, fill = member_casual)) +
geom_boxplot() +
labs(x = "Type of Membership", y = "Ride Duration (minutes)", fill = "Type of Membership",
title = "Distribution of Ride Durations by Membership Type") +
scale_x_discrete(labels = c("Casual", "Long-term")) +  # Adjust labels if necessary
scale_fill_manual(values = c("#619CFF", "#FFA07A"))  # Custom color palette
# Visualizing bike type preference by membership type
ggplot(trips_combined, aes(x = rideable_type, fill = member_casual)) +
geom_bar(position = "stack") +
labs(x = "Type of Bike", y = "Number of Rentals", fill = "Type of Membership",
title = "Bike Type Preference by Membership Type") +
scale_fill_manual(values = c("#619CFF", "#FFA07A"))  # Custom color palette
# Visualizing average rides per day of the week
trips_combined %>%
mutate(day_of_week = wday(started_at, label = TRUE)) %>%
group_by(day_of_week, member_casual) %>%
summarise(avg_rides = mean(ride_length), .groups = 'drop') %>%
ggplot(aes(x = day_of_week, y = avg_rides, color = member_casual)) +
geom_line() +
labs(x = "Day of the Week", y = "Average Number of Rides", color = "Type of Membership",
title = "Average Rides per Day of the Week by Membership Type") +
scale_color_manual(values = c("#619CFF", "#FFA07A"))  # Custom color palette
# Visualizing average rides per day of the week
trips_combined %>%
mutate(day_of_week = wday(started_at, label = TRUE)) %>%
group_by(day_of_week, member_casual) %>%
summarise(avg_rides = mean(ride_length), .groups = 'drop') %>%
ggplot(aes(x = day_of_week, y = avg_rides, color = member_casual)) +
geom_line() +
labs(x = "Day of the Week", y = "Average Number of Rides", color = "Type of Membership",
title = "Average Rides per Day of the Week by Membership Type") +
scale_color_manual(values = c("#619CFF", "#FFA07A"))  # Custom color palette
# Aggregate data to weekly averages
weekly_avg_rides <- trips_combined %>%
mutate(day_of_week = wday(started_at, label = TRUE)) %>%
group_by(member_casual, day_of_week) %>%
summarise(avg_rides = mean(ride_length), .groups = 'drop')
# Plot as a bar chart with error bars
ggplot(weekly_avg_rides, aes(x = day_of_week, y = avg_rides, fill = member_casual)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Day of the Week", y = "Average Ride Duration (minutes)", fill = "Type of Membership",
title = "Average Ride Duration per Day of the Week by Membership Type") +
scale_fill_manual(values = c("#619CFF", "#FFA07A")) +  # Custom color palette
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels if necessary
# Visualizing distribution of ride durations
ggplot(trips_combined, aes(x = factor(member_casual), y = ride_length, fill = member_casual)) +
geom_boxplot() +
labs(x = "Type of Membership", y = "Ride Duration (minutes)", fill = "Type of Membership",
title = "Distribution of Ride Durations by Membership Type") +
scale_x_discrete(labels = c("Casual", "Long-term")) +  # Adjust labels if necessary
scale_fill_manual(values = c("#619CFF", "#FFA07A"))  # Custom color palette
# Visualizing distribution of ride durations
ggplot(trips_combined, aes(x = factor(member_casual), y = ride_length, fill = member_casual)) +
geom_boxplot() +
labs(x = "Type of Membership", y = "Ride Duration (minutes)", fill = "Type of Membership",
title = "Distribution of Ride Durations by Membership Type") +
scale_x_discrete(labels = c("Casual", "Long-term")) +  # Adjust labels if necessary
scale_fill_manual(values = c("#619CFF", "#FFA07A"))  # Custom color palette
install.packages("rmarkdown")
install.packages("ggplot2")
install.packages("tidyverse")
install.packages("ggplot2")
knitr::opts_chunk$set(echo = FALSE)
summary(cars)
knitr::opts_chunk$set(echo = FALSE)
summary(cars)
knitr::opts_chunk$set(echo = FALSE)
# Example data for seasonal trends
seasonal_data <- data.frame(
month = factor(c(1:12, 1:12), labels = month.name),
user_type = rep(c("Annual Members", "Casual Riders"), each = 12),
total_rides = c(5000, 6000, 8000, 10000, 12000, 15000, 18000, 16000, 14000, 12000, 10000, 8000,
2000, 3000, 4000, 6000, 9000, 12000, 14000, 16000, 18000, 15000, 13000)
)
# Example data for seasonal trends
seasonal_data <- data.frame(
month = factor(c(1:12, 1:12), labels = month.name),
user_type = rep(c("Annual Members", "Casual Riders"), each = 12),
total_rides = c(5000, 6000, 8000, 10000, 12000, 15000, 18000, 16000, 14000, 12000, 10000, 8000,
2000, 3000, 4000, 6000, 9000, 12000, 14000, 16000, 18000, 15000, 13000)
)
library(ggplot2)
library(dplyr)
# Example data for hourly distribution
set.seed(123)
hourly_data <- data.frame(
day_of_week = rep(c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"), each = 24),
hour = rep(0:23, times = 7),
rides = sample(1:100, 168, replace = TRUE)
)
ggplot(hourly_data, aes(x = hour, y = day_of_week, fill = rides)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
labs(x = "Hour of Day", y = "Day of Week", title = "Hourly Distribution of Rides") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90))
# Example data for scatter plot
set.seed(456)
ride_data <- data.frame(
duration = runif(100, min = 5, max = 60),
distance = rnorm(100, mean = 10, sd = 2)
)
ggplot(ride_data, aes(x = duration, y = distance)) +
geom_point(color = "blue", size = 3, alpha = 0.7) +
labs(x = "Ride Duration (minutes)", y = "Distance Traveled (miles)", title = "Relationship Between Ride Duration and Distance") +
theme_minimal()
# Example data for seasonal promotions
seasonal_promotions <- data.frame(
month = factor(c(1:12)),
casual_rides = c(5000, 6000, 8000, 10000, 12000, 15000, 18000, 16000, 14000, 12000, 10000, 8000),
annual_members = c(3000, 4000, 6000, 8000, 10000, 12000, 14000, 13000, 11000, 9000, 7000, 5000)
)
ggplot(seasonal_promotions, aes(x = month)) +
geom_line(aes(y = casual_rides, color = "Casual Riders"), size = 1.2) +
geom_line(aes(y = annual_members, color = "Annual Members"), size = 1.2) +
labs(x = "Month", y = "Total Rides", title = "Seasonal Promotions for Casual Riders vs. Annual Members") +
scale_color_manual(values = c("Casual Riders" = "blue", "Annual Members" = "orange")) +
theme_minimal()
# Example data for membership incentives
membership_data <- data.frame(
incentive_type = factor(c("Discount", "Perks", "Bundle Offers")),
conversion_rate = c(0.25, 0.30, 0.20)
)
ggplot(membership_data, aes(x = incentive_type, y = conversion_rate)) +
geom_bar(stat = "identity", fill = "blue", width = 0.5) +
labs(x = "Incentive Type", y = "Conversion Rate", title = "Impact of Membership Incentives on Conversion") +
theme_minimal()
# Example data for digital engagement
digital_engagement <- data.frame(
platform = factor(c("Social Media", "Email Campaigns", "Online Ads")),
engagement = c(0.45, 0.30, 0.25)
)
ggplot(digital_engagement, aes(x = platform, y = engagement)) +
geom_col(fill = "orange", width = 0.5) +
labs(x = "Digital Platform", y = "Engagement Rate", title = "Effectiveness of Digital Engagement") +
theme_minimal()
